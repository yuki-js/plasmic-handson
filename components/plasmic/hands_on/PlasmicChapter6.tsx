// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cY4nGuqRRerez3gozW4dq3
// Component: J7dD1L2D6h
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_hands_on.module.css"; // plasmic-import: cY4nGuqRRerez3gozW4dq3/projectcss
import sty from "./PlasmicChapter6.module.css"; // plasmic-import: J7dD1L2D6h/css

export type PlasmicChapter6__VariantMembers = {};

export type PlasmicChapter6__VariantsArgs = {};
type VariantPropType = keyof PlasmicChapter6__VariantsArgs;
export const PlasmicChapter6__VariantProps = new Array<VariantPropType>();

export type PlasmicChapter6__ArgsType = {};
type ArgPropType = keyof PlasmicChapter6__ArgsType;
export const PlasmicChapter6__ArgProps = new Array<ArgPropType>();

export type PlasmicChapter6__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  ul?: p.Flex<"ul">;
  pre?: p.Flex<"pre">;
};

export interface DefaultChapter6Props {}

function PlasmicChapter6__RenderFunc(props: {
  variants: PlasmicChapter6__VariantsArgs;
  args: PlasmicChapter6__ArgsType;
  overrides: PlasmicChapter6__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yz0OG
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Chapter 6"}
              </h1>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tHwRo
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <ul
                data-plasmic-name={"ul"}
                data-plasmic-override={overrides.ul}
                className={classNames(projectcss.all, projectcss.ul, sty.ul)}
              >
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__e2TC
                  )}
                >
                  {"バージョンパブリッシュする"}
                </li>

                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__wJc2N
                  )}
                >
                  {"PlasmicからGitHubにプッシュする"}
                </li>

                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__usn4C
                  )}
                >
                  {"Next.jsに出力する\n"}
                </li>
              </ul>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ov4Y
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <pre
                data-plasmic-name={"pre"}
                data-plasmic-override={overrides.pre}
                className={classNames(
                  projectcss.all,
                  projectcss.pre,
                  projectcss.__wab_text,
                  sty.pre
                )}
              >
                {
                  "$ npx create-plasmic-app\nPlease specify the project directory\n? What is your project named? plasmic-handson\n? What language do you want to use? TypeScript\n? What React framework do you want to use? Next.js\n? Which scheme do you want to use to integrate Plasmic? Codegen\n\n? What is the URL of your project?\n(If you don't have a project yet, create one by going to\nhttps://studio.plasmic.app/starters/simple-light):\n https://studio.plasmic.app/projects/cY4nGuqRRerez3gozW4dq3"
                }
              </pre>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "ul", "pre"],
  h1: ["h1"],
  ul: ["ul"],
  pre: ["pre"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  ul: "ul";
  pre: "pre";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChapter6__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChapter6__VariantsArgs;
    args?: PlasmicChapter6__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChapter6__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChapter6__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChapter6__ArgProps,
      internalVariantPropNames: PlasmicChapter6__VariantProps
    });

    return PlasmicChapter6__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChapter6";
  } else {
    func.displayName = `PlasmicChapter6.${nodeName}`;
  }
  return func;
}

export const PlasmicChapter6 = Object.assign(
  // Top-level PlasmicChapter6 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    ul: makeNodeComponent("ul"),
    pre: makeNodeComponent("pre"),

    // Metadata about props expected for PlasmicChapter6
    internalVariantProps: PlasmicChapter6__VariantProps,
    internalArgProps: PlasmicChapter6__ArgProps
  }
);

export default PlasmicChapter6;
/* prettier-ignore-end */
