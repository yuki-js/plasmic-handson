// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cY4nGuqRRerez3gozW4dq3
// Component: utAk528Qfb
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_hands_on.module.css"; // plasmic-import: cY4nGuqRRerez3gozW4dq3/projectcss
import sty from "./PlasmicChapter3.module.css"; // plasmic-import: utAk528Qfb/css

export type PlasmicChapter3__VariantMembers = {};

export type PlasmicChapter3__VariantsArgs = {};
type VariantPropType = keyof PlasmicChapter3__VariantsArgs;
export const PlasmicChapter3__VariantProps = new Array<VariantPropType>();

export type PlasmicChapter3__ArgsType = {};
type ArgPropType = keyof PlasmicChapter3__ArgsType;
export const PlasmicChapter3__ArgProps = new Array<ArgPropType>();

export type PlasmicChapter3__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  ul?: p.Flex<"ul">;
};

export interface DefaultChapter3Props {}

function PlasmicChapter3__RenderFunc(props: {
  variants: PlasmicChapter3__VariantsArgs;
  args: PlasmicChapter3__ArgsType;
  overrides: PlasmicChapter3__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___34A8C)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vyWt
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Chapter 3"}
                </h1>
                <React.Fragment>
                  {
                    "8m\n\nコンポーネントについて学びましょう。本章では、開発者がどのようにコンポーネントを使っているか、どのようにすれば、開発者にとって使いやすいコンポーネントを作ることができるかを学ぶことを目的としています。\n\n復習ができるように若干詳しめに書いています。"
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__kwaUy)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__h8I6O)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/hands_on/images/_4Hoa4Tjpg.jpeg",
                  fullWidth: 288,
                  fullHeight: 282,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eTfuj
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <pre
                    className={classNames(
                      projectcss.all,
                      projectcss.pre,
                      projectcss.__wab_text,
                      sty.pre__kUe6Q
                    )}
                  >
                    {
                      '<div class="button" id="button1">\n  <div class="buttonInner">\n    <div class="leftIcon">\n      <div class="iconContainer">\n        <!-- no icon -->\n      </div>\n    </div>\n    <div class="label">\n      Hello world\n    </div>\n    <div class="rightIcon">\n      <div class="iconContainer">\n        <img src="foo">\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\ndocument.getElementById("button1") .addEventListener("click", () => {\n  alert("foo")\n})\n</script>\n\n<div class="button" id="button2">\n  <div class="buttonInner">\n    <div class="leftIcon">\n      <div class="iconContainer">\n        <img src="foo">\n      </div>\n    </div>\n    <div class="label">\n      Hello world2\n    </div>\n    <div class="rightIcon">\n      <div class="iconContainer">\n        <!-- no icon -->\n      </div>\n    </div>\n  </div>\n</div>'
                    }
                  </pre>
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </div>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__xJemL)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__oUIp)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/hands_on/images/ab9Ef9Fc3F6D4Fbd7878Cf8F172A97B3Jpg.jpeg",
                  fullWidth: 350,
                  fullHeight: 359,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__f9Dmy
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <pre
                    className={classNames(
                      projectcss.all,
                      projectcss.pre,
                      projectcss.__wab_text,
                      sty.pre__zHsvd
                    )}
                  >
                    {
                      'import Button from "components/plasmic/Button"\n\nconst ラベルテキストを入れるための変数 = "world"\n<Button leftIcon={<FooIcon />} rightIcon={null} onClick={()=>alert("foo")}>\n  Hello {ラベルテキストを入れるための変数}\n</Button>\n\nconst 変数名にUnicode文字を使えます = "world2"\n<Button leftIcon={null} rightIcon={<FooIcon />}>\n  Hello {ラベルテキストを入れるための変数2}\n</Button>'
                    }
                  </pre>
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </div>
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__omXzs)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bpfJc
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__prIo5
                  )}
                >
                  {"React"}
                </h2>
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__bAmkQ)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ocLxC
              )}
            >
              {
                "Reactでコンポーネントを作ることができます。\nJSXというXMLに似た記法を使うことで、コンポーネントを記述することができます。"
              }
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___3Cmq)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kl0L1
              )}
            >
              <React.Fragment>
                <React.Fragment>{""}</React.Fragment>
                <pre
                  className={classNames(
                    projectcss.all,
                    projectcss.pre,
                    projectcss.__wab_text,
                    sty.pre___1KlRr
                  )}
                >
                  {
                    '<ComponentName prop1={1} prop2={{ "this is": "object" }} prop3={["array", "item"]} children={"Hello" + name} />'
                  }
                </pre>
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__nMhhd)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__u7AgT
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "コンポーネント内の諸々にそれぞれを識別するための名前（識別子）がついています。\nコンポーネントが持つ識別子は以下の通り\n"
                  }
                </React.Fragment>
                <ul
                  data-plasmic-name={"ul"}
                  data-plasmic-override={overrides.ul}
                  className={classNames(projectcss.all, projectcss.ul, sty.ul)}
                >
                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.li__ilcuc
                    )}
                  >
                    {"コンポーネント名 ComponentName"}
                  </li>

                  <li
                    className={classNames(
                      projectcss.all,
                      projectcss.li,
                      projectcss.__wab_text,
                      sty.li__jUhXf
                    )}
                  >
                    {"プロップ prop1 prop2 children"}
                  </li>
                </ul>
                <React.Fragment>{""}</React.Fragment>
              </React.Fragment>
            </div>
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bwgfJ
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {
                  "プロップの中でも、childrenという名前のプロップは特別扱いされ、以下のように記述することができます。上記のコードと下記のコードは等価です。\n\n"
                }
              </React.Fragment>
              <pre
                className={classNames(
                  projectcss.all,
                  projectcss.pre,
                  projectcss.__wab_text,
                  sty.pre__r7Dp
                )}
              >
                {
                  '<ComponentName prop1={1} prop2={{ "this is": "object" }} prop3={["array", "item"]}>\n  Hello {name}\n</ComponentName>'
                }
              </pre>
              <React.Fragment>
                {
                  "\nchildrenだけは子要素として記述することができるので、わざわざchildrenと書かなくていい上、親要素と子要素の関係が明確になり、よりHTMLっぽく書けますね。"
                }
              </React.Fragment>
            </React.Fragment>
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oH0LQ
            )}
          >
            {
              "先述のReactコンポーネントが持つそれぞれの識別子は、歴史的な経緯により、その命名に慣習があります。慣習なので破ることは可能ですが、エンジニアだけでなくコンピュータからも、嫌な顔をされます(潜在的デメリットがあるため、そこらへん非常に厳しい)。"
            }
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___5DhAo)}>
            <div className={classNames(projectcss.all, sty.freeBox__uZpIf)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__smSml
                )}
              >
                {"Reactコンポーネント内の識別子"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__qgJjz)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__q50F3
                )}
              >
                {"命名規則"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__uJxx9)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___38BAz
                )}
              >
                {"例"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__tnkQj)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jlDKl
                )}
              >
                {"コンポーネント名"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__lLlMv)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aEEsR
                )}
              >
                {"アッパーキャメルケース"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__cp3IT)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fAbJs
                )}
              >
                {"Text\nIconButton\nBuyJpyc\nWalletAddressIndicator"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__cbpMx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ddRdn
                )}
              >
                {"プロップ"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__gzJQr)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nLldT
                )}
              >
                {"ローワーキャメルケース"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__w2Axp)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__a2Cxt
                )}
              >
                {"value\namountInUsd\nonClick"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__oTqJ5)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wxPj
                )}
              >
                {"children"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__eLvQ)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___9UCoN
                )}
              >
                {"children"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox___8DbLh)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pLmXb
                )}
              >
                {"children(短縮表記する場合はHTMLの子要素と同様に利用)"}
              </div>
            </div>
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5BhpP
            )}
          >
            {
              "そんな感じで、Reactは色々ルールがあるんですね。このルールはPlasmicにも適用されます。Plasmicにおける要素それぞれに対して、出力されるReactコンポーネント内の識別子に沿った命名規則を適用しなければいけません。一度に理解するのは難しいので、一緒に触りながら覚え、実際に自分で作るときには、このページに戻ってきて復習しましょう。"
            }
          </div>

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__xQq9N
            )}
          >
            {"命名規則チートシート"}
          </h2>

          <div className={classNames(projectcss.all, sty.freeBox__dhZyU)}>
            <div className={classNames(projectcss.all, sty.freeBox__xkDd6)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qRj5N
                )}
              >
                {"Plasmic内の識別子"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox___3IoTa)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cqPbw
                )}
              >
                {"Reactコンポーネント内の識別子"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__c9On)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sXNi
                )}
              >
                {"命名規則"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__r3BZ5)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___1Ubqi
                )}
              >
                {"コンポーネント名"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__gc2Sw)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wqlCa
                )}
              >
                {"コンポーネント名"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__fcad3)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__k2WMa
                )}
              >
                {"アッパーキャメルケース"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__ibUt)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ayOlL
                )}
              >
                {"Slotにつける名前"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__lhl3K)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___14B65
                )}
              >
                {"プロップ"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__m4Zud)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gTqsH
                )}
              >
                {"ローワーキャメルケース"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__tT5F3)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qtZot
                )}
              >
                {"名前がchildrenであるSlot"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__ohiYn)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dFgW7
                )}
              >
                {"children"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox___3IIH)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e8Bt0
                )}
              >
                {"children"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox___3MTV)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__coPq
                )}
              >
                {"Prop,Meta -prop"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__ufIn2)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7EyZx
                )}
              >
                {"プロップ"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__kLeq3)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cloo0
                )}
              >
                {"ローワーキャメルケース"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__mQ8Rh)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ajMpa
                )}
              >
                {"ページ名"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__pWxWv)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pjXTp
                )}
              >
                {"コンポーネント名"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__eDkhW)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ny2LL
                )}
              >
                {"アッパーキャメルケース"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__b88VA)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dcvn5
                )}
              >
                {"Path"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__gd3Wj)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__b7IsN
                )}
              >
                {"アドレスバーのパス"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__abERn)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__h1WaM
                )}
              >
                {"ケバブケース"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__l8D8I)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__f1HjR
                )}
              >
                {
                  "名前がついている要素（ページやコンポーネントの中にあって、外部から参照されることを想定される要素）"
                }
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__prVei)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__icJvd
                )}
              >
                {"プロップ（名前付き子要素のプロップへバケツリレーされる）"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__d8GHk)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7H0Du
                )}
              >
                {"ローワーキャメルケース"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__zAzmi)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__krul5
                )}
              >
                {"Variant"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__l32N)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__r6AR9
                )}
              >
                {"プロップ（TypeScriptによって固定値にされる）"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__akzsR)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__viFlL
                )}
              >
                {"ローワーキャメルケースが望ましい"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__xx9D7)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__t8Lwq
                )}
              >
                {"Global Variant"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__aiOQn)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bsd9A
                )}
              >
                {"Global Variant Providerのプロップ"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__oPfby)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rpGrg
                )}
              >
                {"ローワーキャメルケースが望ましい"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__ktsR6)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tMms1
                )}
              >
                {"Style Tokens"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__giIq9)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__x69In
                )}
              >
                {"CSSの変数名"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__bP3O7)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zNclf
                )}
              >
                {"ローワーキャメルケースが望ましい"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__wKGyX)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bY5O
                )}
              >
                {"Mixins"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__i1HKp)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dbgTs
                )}
              >
                {"Plasmicの内部的な名前"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__hPu2B)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fLhzE
                )}
              >
                {"ローワーキャメルケースが望ましい"}
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__wclLg)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___9LYVs
              )}
            >
              {
                "右上のCodeの右側の下アローをクリックして Component API Explorer を開くと、どのようにコード内で使えるかがわかります"
              }
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "ul"],
  h1: ["h1"],
  ul: ["ul"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  ul: "ul";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChapter3__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChapter3__VariantsArgs;
    args?: PlasmicChapter3__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChapter3__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChapter3__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChapter3__ArgProps,
      internalVariantPropNames: PlasmicChapter3__VariantProps
    });

    return PlasmicChapter3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChapter3";
  } else {
    func.displayName = `PlasmicChapter3.${nodeName}`;
  }
  return func;
}

export const PlasmicChapter3 = Object.assign(
  // Top-level PlasmicChapter3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    ul: makeNodeComponent("ul"),

    // Metadata about props expected for PlasmicChapter3
    internalVariantProps: PlasmicChapter3__VariantProps,
    internalArgProps: PlasmicChapter3__ArgProps
  }
);

export default PlasmicChapter3;
/* prettier-ignore-end */
