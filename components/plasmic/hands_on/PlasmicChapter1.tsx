// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cY4nGuqRRerez3gozW4dq3
// Component: GLLGhkAxn6Nf
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_hands_on.module.css"; // plasmic-import: cY4nGuqRRerez3gozW4dq3/projectcss
import sty from "./PlasmicChapter1.module.css"; // plasmic-import: GLLGhkAxn6Nf/css

export type PlasmicChapter1__VariantMembers = {};

export type PlasmicChapter1__VariantsArgs = {};
type VariantPropType = keyof PlasmicChapter1__VariantsArgs;
export const PlasmicChapter1__VariantProps = new Array<VariantPropType>();

export type PlasmicChapter1__ArgsType = {};
type ArgPropType = keyof PlasmicChapter1__ArgsType;
export const PlasmicChapter1__ArgProps = new Array<ArgPropType>();

export type PlasmicChapter1__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  ul?: p.Flex<"ul">;
};

export interface DefaultChapter1Props {}

function PlasmicChapter1__RenderFunc(props: {
  variants: PlasmicChapter1__VariantsArgs;
  args: PlasmicChapter1__ArgsType;
  overrides: PlasmicChapter1__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1
            )}
          >
            {"Chapter 1"}
          </h1>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cy5M8
            )}
          >
            {"10min"}
          </div>

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__zEkhb
            )}
          >
            {"概要"}
          </h2>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ynxCa
            )}
          >
            <React.Fragment>
              <React.Fragment>
                {"本章ではテキストを配置していきます。\n作例は"}
              </React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "#FD4F00", fontWeight: 700 }}
              >
                {"本ページそのもの"}
              </span>
              <React.Fragment>{"です。"}</React.Fragment>
            </React.Fragment>
          </div>

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__tgtUh
            )}
          >
            {"やること"}
          </h2>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0IIx
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              <ul
                data-plasmic-name={"ul"}
                data-plasmic-override={overrides.ul}
                className={classNames(projectcss.all, projectcss.ul, sty.ul)}
              >
                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__x2ZZw
                  )}
                >
                  {"プロジェクトをつくる"}
                </li>

                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__mz2Lp
                  )}
                >
                  {"ページを作成する"}
                </li>

                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li__zddz8
                  )}
                >
                  {"テキストを配置する"}
                </li>

                <li
                  className={classNames(
                    projectcss.all,
                    projectcss.li,
                    projectcss.__wab_text,
                    sty.li___92Sdh
                  )}
                >
                  {
                    "テキストを複数配置したり、サイズ、色、ウェイト、フォントファミリを変更してみる"
                  }
                </li>
              </ul>
              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__kjP1K
            )}
          >
            {"やってみよう"}
          </h2>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__u8N2N
            )}
          >
            {"テキストを複数配置する"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__wgY6J
            )}
          >
            {"テキストを複数配置して中央揃えにする"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__quore
            )}
          >
            {"テキストを複数配置して右揃えにする"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zGCv9
            )}
          >
            {"Sizeを変更する"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lumwx
            )}
          >
            {"Colorを変更する"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rGmB
            )}
          >
            {"Weightを変更する"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tqwr0
            )}
          >
            {"スタイルを変更する"}
          </div>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rk9Ir
            )}
          >
            {"Change the font family"}
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "ul"],
  h1: ["h1"],
  ul: ["ul"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  ul: "ul";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChapter1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChapter1__VariantsArgs;
    args?: PlasmicChapter1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicChapter1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChapter1__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChapter1__ArgProps,
      internalVariantPropNames: PlasmicChapter1__VariantProps
    });

    return PlasmicChapter1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChapter1";
  } else {
    func.displayName = `PlasmicChapter1.${nodeName}`;
  }
  return func;
}

export const PlasmicChapter1 = Object.assign(
  // Top-level PlasmicChapter1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    ul: makeNodeComponent("ul"),

    // Metadata about props expected for PlasmicChapter1
    internalVariantProps: PlasmicChapter1__VariantProps,
    internalArgProps: PlasmicChapter1__ArgProps
  }
);

export default PlasmicChapter1;
/* prettier-ignore-end */
